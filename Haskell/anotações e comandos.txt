arquivos de exemplo: 
https://github.com/euzin4/2025.1/tree/1d18319d2465217700bd821aa80f3f9938448460/linguagens%20de%20programa%C3%A7%C3%A3o/25.03.25%20arq%20de%20aula

no terminal:
ghci    --abre o compilador haskell
:r      --da reload no arquivo aberto
:t      --mostra a o tipo do comando

no arquivo:
-- comentario de uma linha
{- comentario de varias linhas -}

[1,2,3]  --lista (só pode ser de um tipo)
head  --retorna o primeiro item da lista
tail  --retorna todos os itens da lista exceto o primeiro

(1,'b')  --tupla (pode ter mais de um tipo)
fst  --retorna o primeiro elemento da tupla
snd  --retorna o segundo elemento da tupla

funcao :: entrada -> retorno  --declaraçao de uma funçao (funcao: nome da funcao, entrada: tipo da entrada, retorno: tipo do retorno, EX: funcao :: String -> String)
funcao x = x*3                --codigo da funçao (o valor a recebido 'x' é multiplicado por 3 e o valor é retornado)
funcaoSoma x y = x+y          --função que recebe mais de um parametro

variavel <- getLine  --entrada de dados pelo teclado
putStrLn "frase printada"  --print simples
putStrLn ("frase fixa " ++ variavel ++ " frase fixa")  --print com variavel

--Função Lambda:
nomeFuncao x = x*3  --funçao normal
\x -> x*3  --funçao Lambda
--os dois recebem 'x' como parametro mas a funçao lambda não da nome a funçao
funcaoSoma \x y -> x+y  --funçao lambda que recebe 2 parametros

--funçao map (aplica uma funçao a cada elemento de uma lista):
--se a funçao for "soma x = x+1" entao:
map soma [1,2,3]  --retorna [2,3,4]

--funçoes foldl(associativa a esquerda) e foldr(associativa a direita), reduzem uma lista usando uma função binária e um valor inicial:
foldl (+) 0 []    --retona 0
foldl (+) 0 [1,2]  --retorna 3

--funçao filter, recebe uma funçao e uma lista como argumento e filta os elementos da lista para o qual a funçao dada resulta em verdadeiro:
filter par [1,8,10,48,5,-3]  --retorna os valores par da lista "[8,10,48]"

